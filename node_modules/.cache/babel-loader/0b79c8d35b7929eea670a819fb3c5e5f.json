{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\GitHub\\\\goit-react-hw-04-phonebook\\\\src\\\\components\\\\Phonebook\\\\Phonebook.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport shortId from \"shortid\";\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Phonebook = () => {\n  _s();\n\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n  nameInputId = shortId.generate();\n  numberInputId = shortId.generate();\n\n  onInputChange = e => {\n    switch (e.target.name) {\n      case \"name\":\n        setName(e.target.value);\n        break;\n\n      case \"number\":\n        setNumber(e.target.value);\n        break;\n    }\n\n    this.setState({\n      [name]: value\n    });\n  };\n\n  formReset = () => {\n    this.setState({\n      name: '',\n      number: ''\n    });\n  };\n\n  onSubmitHandle = e => {\n    e.preventDefault();\n    const contact = {\n      name: this.state.name,\n      number: this.state.number,\n      id: shortId.generate()\n    };\n    this.props.addContact(contact);\n    this.formReset();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.onSubmitHandle,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: this.nameInputId,\n        children: [\"Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"name\",\n          pattern: \"^[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]+(([' -][a-zA-Z\\u0430-\\u044F\\u0410-\\u042F ])?[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]*)*$\",\n          title: \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n          required: true,\n          value: this.state.name,\n          onChange: this.onInputChange,\n          id: this.nameInputId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: this.numberInputId,\n        children: [\"Number\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"tel\",\n          name: \"number\",\n          pattern: \"\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}\",\n          title: \"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\",\n          required: true,\n          value: this.state.number,\n          id: this.numberInputId,\n          onChange: this.onInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 13\n  }, this);\n};\n\n_s(Phonebook, \"s60cmfhvA68cA+XjWbsAw+FD2C0=\");\n\n_c = Phonebook;\nPhonebook.propTypes = {\n  addContact: PropTypes.func.isRequired\n};\nexport default Phonebook;\n\nvar _c;\n\n$RefreshReg$(_c, \"Phonebook\");","map":{"version":3,"sources":["C:/Users/User/Documents/GitHub/goit-react-hw-04-phonebook/src/components/Phonebook/Phonebook.jsx"],"names":["useState","shortId","PropTypes","Phonebook","name","setName","number","setNumber","nameInputId","generate","numberInputId","onInputChange","e","target","value","setState","formReset","onSubmitHandle","preventDefault","contact","state","id","props","addContact","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport shortId from \"shortid\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Phonebook = () => {\r\n\r\n    const [name, setName] = useState(\"\");\r\n    const [number, setNumber] = useState(\"\");\r\n\r\n    nameInputId = shortId.generate();\r\n    numberInputId = shortId.generate();\r\n\r\n    onInputChange = e => {\r\n\r\n        switch (e.target.name) {\r\n            case \"name\":\r\n                setName(e.target.value)\r\n                break;\r\n            case \"number\":\r\n                setNumber(e.target.value)\r\n                break\r\n        }    \r\n        \r\n    this.setState({ [name]: value })  \r\n    }\r\n    \r\n    formReset = () => {\r\n    \r\n    this.setState(\r\n      {\r\n        name: '',\r\n        number: '',\r\n      }\r\n    )\r\n    };\r\n    \r\n    onSubmitHandle = e => {\r\n\r\n    e.preventDefault();\r\n        \r\n    const contact = {\r\n    name: this.state.name,\r\n    number: this.state.number,\r\n    id: shortId.generate(),\r\n    }\r\n    this.props.addContact(contact)\r\n\r\n    this.formReset()\r\n\r\n    };\r\n\r\n        return (\r\n            <div>\r\n            \r\n                <form onSubmit={this.onSubmitHandle}>\r\n                <label htmlFor={this.nameInputId}>\r\n                    Name\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n                        required\r\n                        value={this.state.name}\r\n                        onChange={this.onInputChange}\r\n                        id={this.nameInputId}\r\n                    />\r\n                </label>\r\n                <br />\r\n                <label htmlFor={this.numberInputId}>\r\n                    Number\r\n                    <input\r\n                        type=\"tel\"\r\n                        name=\"number\"\r\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n                        required\r\n                        value={this.state.number}\r\n                        id={this.numberInputId}\r\n                        onChange={this.onInputChange}\r\n                    />\r\n                </label>\r\n                <br />\r\n                <button type=\"submit\">Add contact</button>\r\n            </form>\r\n            </div>\r\n        )       \r\n    }\r\n\r\nPhonebook.propTypes = {\r\n    addContact: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Phonebook\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}